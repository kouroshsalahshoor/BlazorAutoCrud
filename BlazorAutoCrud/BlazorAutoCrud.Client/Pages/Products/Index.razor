@page "/products"

<PageTitle>@_title</PageTitle>

<h3>@_title</h3>

@if (_isLoading)
{
    <p>loading...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Quantity</th>
                <th style="width:230px"><div class="row"><button class="btn btn-primary float-end" @onclick="@(() => _navigationManager.NavigateTo("product/create"))">Create</button></div></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items!)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                    <td>
                        <a class="btn btn-warning" href="/product/edit/@item.Id">Edit</a>
                        <a class="btn btn-info" href="/product/@item.Id">Details</a>
                        <button class="btn btn-danger" @onclick="@(async () => await delete(item.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private string _title = "Products";

    private List<Product>? _items = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    private async Task load()
    {
        _isLoading = true;
        _items!.Clear();
        var data = await _productService.Get();
        if (data is not null)
        {
            _items = data;
        }
        _isLoading = false;
    }

    private async Task delete(int id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure deleting this item?"))
        {
            await _productService.Delete(id);
            await load();
        }
    }
}
